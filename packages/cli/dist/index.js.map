{"version":3,"sources":["../src/index.ts","../src/commands/add.ts","../src/utils/ascii-arts.ts","../src/utils/logger.ts","../src/utils/get-package-info.ts"],"sourcesContent":["import \"dotenv/config\"\nimport { Command } from \"commander\";\n\nimport { add } from \"./commands/add\";\nimport { getPackageInfo } from \"./utils/get-package-info\";\n\nprocess.on(\"SIGINT\", () => process.exit(0));\nprocess.on(\"SIGTERM\", () => process.exit(0));\n\nasync function main() {\n  const packageInfo = await getPackageInfo();\n\n  const program = new Command()\n    .name(\"farmui\")\n    .description(\"Add natively farmed farmUI blocks \")\n    .version(\n      packageInfo.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\",\n    );\n\n  program.addCommand(add)\n\n  program.parse();\n}\n\nmain();\n","import \"dotenv/config\";\nimport { existsSync, promises as fs } from \"fs\";\nimport path from \"path\";\nimport chalk from \"chalk\";\nimport gradient from \"gradient-string\";\nimport { toBlock, toBlockString } from \"terminal-block-fonts\";\nimport { Command } from \"commander\";\nimport ora from \"ora\";\nimport { execa } from \"execa\";\nimport prompts from \"prompts\";\nimport { FARMUI_GRAFFITI } from \"../utils/ascii-arts\";\nimport { logger } from \"../utils/logger\";\nimport { z } from \"zod\";\n\n\nprocess.on(\"SIGINT\", () => process.exit(0));\nprocess.on(\"SIGTERM\", () => process.exit(0));\n\n\n\nconst COMPONENT_REGISTERY_URL = process.env.COMPONENTS_REGISTRY_URL ?? \"http://localhost:3000/api/components\";\ntype CompToAddProps = {\n  comp_path: string;\n  comp_content: string;\n};\nconst addCommandInput = z.object({\n  id: z.string(),\n  cwd: z.string(),\n});\n\nconsole.log(gradient(\"pink\", \"blue\")(FARMUI_GRAFFITI));\n\nexport const add = new Command()\n\n  .name(\"add\")\n  .description(\"add a new component or UI from farmui\")\n  .argument(\"<string>\", \"id of the component from https://farmui.com\")\n  // .option(\"--id\", \"id of the component\")\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (id, opts) => {\n    const options = addCommandInput.parse({\n      id,\n      ...opts,\n    });\n\n    const custom_cwd = path.resolve(options.cwd);\n    if (!existsSync(custom_cwd)) {\n      logger.error(`There is no ${custom_cwd} exists your paths.`);\n      process.exit(0);\n    }\n    let defaultDir = \"components\";\n    const custom_cwd_flag = process.cwd() === options.cwd\n    // already found the id and next will be finding the component id\n    try {\n      if (!custom_cwd_flag) {\n        logger.info(`We are dumping the component inside of ${custom_cwd} `)\n      } else {\n\n        const { dir } = await prompts({\n          type: \"text\",\n          name: \"dir\",\n          message: `A directory to dump the components? `,\n          hint: \"components \",\n\n        });\n        if (dir) {\n          defaultDir = dir;\n        }\n      }\n      // should be prompting it for the component place to be stored\n      const path_ = path.join(custom_cwd, defaultDir);\n      const root_dir = path.join(path_, \"/farmui\");\n      const comp_fetch = await fetch(COMPONENT_REGISTERY_URL!);\n      let comp_db: any[] = await comp_fetch.json();\n      const select_files_by_id = comp_db.find((x) => x.id === options.id);\n      if (!select_files_by_id) {\n        logger.error(\"No such component exists with in this ID.\");\n        process.exit(0);\n      }\n\n      const exist = existsSync(root_dir);\n\n      if (exist) {\n        // logic for existed\n        const { proceed } = await prompts({\n          type: \"confirm\",\n          name: \"proceed\",\n          message: `Ready to install components and dependencies. Proceed?`,\n          initial: true,\n        });\n\n        if (!proceed) {\n          logger.info(\n            \"Make sure you have the right path to dump the components\"\n          );\n          process.exit(0);\n        }\n      } else {\n        await fs.mkdir(root_dir, { recursive: true });\n      }\n      const path_to_add: CompToAddProps[] = [];\n      // for now , the content we will support will be react based , toll we have updated the ednpoint\n      const root_comp_name = select_files_by_id.files[0].root.name;\n      const root_comp_content =\n        select_files_by_id.files[0].root.contents[0].content;\n      const root_comp_path = path.join(root_dir, root_comp_name);\n      const child_comp = select_files_by_id.files[1].child;\n      path_to_add.push({\n        comp_content: root_comp_content,\n        comp_path: root_comp_path,\n      });\n\n      const child_path: string[] = [];\n      const depends_on: any[] = child_comp;\n      depends_on.map((dep) => {\n        const child_comp_name = dep.name;\n        const child_comp_content = dep.contents[0].content;\n        const child_comp_path = path.join(root_dir, child_comp_name);\n        path_to_add.push({\n          comp_content: child_comp_content,\n          comp_path: child_comp_path,\n        });\n      });\n      const spinner = ora(`Dumping your components...`);\n      spinner.start();\n      const dependencies: string[] = select_files_by_id.dependencies;\n      if (!path_to_add) {\n        logger.warn(\"No component to add\");\n      } else {\n        path_to_add.map(async ({ comp_content, comp_path }) => {\n          await fs.writeFile(`${comp_path}.tsx`, comp_content);\n        });\n      }\n      if (dependencies?.length) {\n        await execa(\"pnpm\", [\"install\", ...dependencies], {\n          cwd: process.cwd(),\n        });\n      }\n      spinner.stop();\n      if (dependencies.length) {\n        logger.info(`Dependencies - ${dependencies.length} added`)\n        dependencies.map((dep) => {\n          logger.success(` + ${dep}`)\n        })\n\n      }\n      if (path_to_add) {\n        const path_for_comp = root_dir.split(\"/\")\n        const last_two = path_for_comp[path_for_comp.length - 1] + path_for_comp[path_for_comp - 2]\n\n        logger.info(`Components - ${path_to_add.length} added inside of ${last_two}`)\n        path_to_add.map((comps) => {\n          const comp_names = comps.comp_path.split(\"/\")\n          const comp_name = comp_names[comp_names.length - 1]\n          logger.success(` + ${comp_name}`)\n        })\n      }\n      spinner.succeed(\"Successfully installed\");\n    } catch (err) {\n      logger.error(\"Error has occured!\")\n      console.log(\"Error: \", err);\n    }\n  });\n","export const FARMUI_GRAFFITI = `\n░▒▓████████▓▒░▒▓██████▓▒░░▒▓███████▓▒░░▒▓██████████████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓██████▓▒░░▒▓████████▓▒░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░  \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓██████▓▒░░▒▓█▓▒░  v0.0.1 \n\n                                                                               \n`","import chalk from \"chalk\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args))\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args))\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args))\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args))\n  },\n  break() {\n    console.log(\"\")\n  },\n}\n","import path from \"path\"\nimport fs from \"fs-extra\"\nimport { type PackageJson } from \"type-fest\"\n\nexport function getPackageInfo() {\n  const packageJsonPath = path.join(\"package.json\")\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson\n}\n"],"mappings":"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","names":["Command","existsSync","fs","path","gradient","Command","ora","execa","prompts","FARMUI_GRAFFITI","chalk","logger","args","z","COMPONENT_REGISTERY_URL","addCommandInput","gradient","FARMUI_GRAFFITI","add","Command","id","opts","options","custom_cwd","path","existsSync","logger","defaultDir","custom_cwd_flag","dir","prompts","path_","root_dir","select_files_by_id","x","proceed","fs","path_to_add","root_comp_name","root_comp_content","root_comp_path","child_comp","child_path","dep","child_comp_name","child_comp_content","child_comp_path","spinner","ora","dependencies","comp_content","comp_path","execa","path_for_comp","last_two","comps","comp_names","comp_name","err","path","fs","getPackageInfo","packageJsonPath","main","packageInfo","getPackageInfo","program","Command","add"]}