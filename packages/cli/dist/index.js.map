{"version":3,"sources":["../src/index.ts","../src/commands/add.ts","../src/utils/get-package-info.ts"],"sourcesContent":["\nimport { Command } from \"commander\";\n\nimport { add } from \"./commands/add\";\nimport { getPackageInfo } from \"./utils/get-package-info\";\n\nprocess.on(\"SIGINT\", () => process.exit(0));\nprocess.on(\"SIGTERM\", () => process.exit(0));\n\nasync function main() {\n  const packageInfo = await getPackageInfo();\n\n  const program = new Command()\n    .name(\"farmui\")\n    .description(\"Add natively farmed farmUI blocks \")\n    .version(\n      packageInfo.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\",\n    );\n\n  program.addCommand(add)\n\n  program.parse();\n}\n\nmain();\n","\nimport \"dotenv/config\"\nimport { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport chalk from \"chalk\"\nimport { Command } from \"commander\"\nimport ora from \"ora\"\nimport { execa } from \"execa\";\nimport prompts from \"prompts\"\nconst COMPONENT_REGISTERY_URL =  process.env.COMPONENTS_REGISTRY_URL\nconsole.log({COMPONENT_REGISTERY_URL})\nexport const add = new Command()\n\n\n  .name(\"farmui-add\")\n  .description(\"Adding a new component for farmui from terminal\")\n  .argument(\"<string>\", \"Id of the componnt from farmui.com\")\n  .option(\"--id\", \"id of the component\")\n  .action(async (id, opts) => {\n    // already found the id and next will be finding the component id\n    try {\n      let fileName = \"components\"\n      const { dirName } = await prompts({\n        type: \"text\",\n        name: \"dirName\",\n        message: \"A directory where it should be living\",\n        hint: \"./components \",\n      })\n      console.log({ dirName })\n      if (dirName) {\n        fileName = dirName\n      }\n      // should be prompting it for the component place to be stored\n      const path_ = path.join(process.cwd(), fileName)\n      const root_dir = path.join(process.cwd(), \"/src\")\n\n      const exist = existsSync(path_)\n      const is_exist_but_allowed = false\n\n      if (exist) {\n        // logic for existed\n        console.log(\"The component alredy existed\")\n        const { proceed } = await prompts({\n          type: \"confirm\",\n          name: \"proceed\",\n          message: `Ready to install components and dependencies. Proceed?`,\n          initial: true,\n        })\n      }\n      await fs.mkdir(path_, { recursive: true })\n      let formattedText = \"\"\n      formattedText = `${id}.tsx`\n      const targetpath_ = path.join(process.cwd() + \"/src\", \"index.ts\")\n      const target_read = await fs.readFile(targetpath_, \"utf8\")\n      const comp_db = path.join(process.cwd() + \"/src\", \"comp.json\")\n\n      const comp_file = await fs.readFile(comp_db, \"utf8\")\n      const parsed_json = await JSON.parse(comp_file)\n      const select_files_by_id = parsed_json.find((x) => x.id === id)\n      const path_it_self = select_files_by_id.comp_path\n      const dependent_path = select_files_by_id.depends_on\n      const write_together = [path_it_self, ...dependent_path]\n\n      const spinner = ora(`Installing components...`).start()\n      console.log({ write_together })\n      write_together.map(async (comp) => {\n        const file_path = path.join(root_dir, \"commands\")\n        const file_path_read = path.join(file_path, comp)\n        console.log({ file_path_read })\n        const file_read = await fs.readFile(file_path_read, \"utf8\")\n        const write_path = path.join(path_, comp)\n        await fs.writeFile(write_path, file_read)\n      })\n      const dependencies = select_files_by_id.dependencies\n      if (dependencies?.length) {\n        await execa(\"pnpm\", ['install', ...dependencies], { cwd: process.cwd() })\n      }\n      spinner.succeed(\"Successfully installed\")\n    } catch (err) {\n      console.log(\"Error: \", err)\n    }\n  })\n","import path from \"path\"\nimport fs from \"fs-extra\"\nimport { type PackageJson } from \"type-fest\"\n\nexport function getPackageInfo() {\n  const packageJsonPath = path.join(\"package.json\")\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson\n}\n"],"mappings":"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","names":["Command","existsSync","fs","path","Command","ora","execa","prompts","COMPONENT_REGISTERY_URL","add","id","opts","fileName","dirName","path_","root_dir","exist","is_exist_but_allowed","proceed","formattedText","targetpath_","target_read","comp_db","comp_file","select_files_by_id","x","path_it_self","dependent_path","write_together","spinner","comp","file_path","file_path_read","file_read","write_path","dependencies","err","path","fs","getPackageInfo","packageJsonPath","main","packageInfo","getPackageInfo","program","Command","add"]}