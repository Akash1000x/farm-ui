{"version":3,"sources":["../src/index.ts","../src/commands/add.ts","../src/utils/ascii-arts.ts","../src/utils/logger.ts"],"sourcesContent":["import \"dotenv/config\";\nimport { Command } from \"commander\";\n\nimport { add } from \"./commands/add\";\nimport { getPackageInfo } from \"./utils/get-package-info\";\nprocess.on(\"SIGINT\", () => process.exit(0));\nprocess.on(\"SIGTERM\", () => process.exit(0));\n\nasync function main() {\n   const program = new Command()\n    .command(\"farm-ui\")\n    .name(\"farm-ui\")\n    .description(\n      \"Treating UI libs as first class citizen and making sure they are headless\\nfor more, visit us - https://farmui.com\"\n    )\n    .version(\"0.0.1\", \"-v, --version\", \"display the version number\");\n\n  program.addCommand(add())\n  program.parse(process.argv);\n}\n\nmain();","import \"dotenv/config\";\nimport { existsSync, promises as fs } from \"fs\";\nimport path from \"path\";\nimport chalk from \"chalk\";\nimport gradient from \"gradient-string\";\nimport { toBlock, toBlockString } from \"terminal-block-fonts\";\nimport { Command } from \"commander\";\nimport ora from \"ora\";\nimport { execa } from \"execa\";\nimport prompts from \"prompts\";\nimport { FARMUI_GRAFFITI } from \"../utils/ascii-arts\";\nimport { logger } from \"../utils/logger\";\nconst COMPONENT_REGISTERY_URL =\n  process.env.COMPONENTS_REGISTRY_URL ?? \"http://localhost:3000/api/components\";\nconsole.log({ COMPONENT_REGISTERY_URL });\ntype CompToAddProps = {\n  comp_path: string;\n  comp_content: string;\n};\n\nconsole.log(gradient(\"pink\", \"blue\")(FARMUI_GRAFFITI));\nexport const add = () => {\n\n\nconst addsomething = new Command()\n  .command('add')\n  .description(\"add a new component or UI from farmui\")\n  .argument(\"<string>\", \"id of the component from https://farmui.com\")\n  // .option(\"--id\", \"id of the component\")\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (id, opts) => {\n    // already found the id and next will be finding the component id\n\n    console.log({ opts });\n    try {\n      let defaultDir = \"components\";\n      const { dir } = await prompts({\n        type: \"text\",\n        name: \"dir\",\n        message: \"A directory where it should be living\",\n        hint: \"./components \",\n      });\n      console.log({ dir });\n      if (dir) {\n        defaultDir = dir;\n      }\n      // should be prompting it for the component place to be stored\n      const path_ = path.join(process.cwd(), defaultDir);\n      const root_dir = path.join(path_, \"/ui\");\n\n      const exist = existsSync(path_);\n\n      if (exist) {\n        // logic for existed\n        logger.info(\"The component already existed\");\n        const { proceed } = await prompts({\n          type: \"confirm\",\n          name: \"proceed\",\n          message: `Ready to install components and dependencies. Proceed?`,\n          initial: true,\n        });\n        if (!proceed) {\n          logger.info(\n            \"Make sure you have the right path to dump the components\"\n          );\n          process.exit(0);\n        }\n      }\n      await fs.mkdir(root_dir, { recursive: true });\n      const path_to_add: CompToAddProps[] = [];\n      // const comp_db = path.join(process.cwd() + \"/ui\", \"comp.json\")\n      const comp_fetch = await fetch(COMPONENT_REGISTERY_URL!);\n      console.log(comp_fetch);\n      let comp_db: any[] = await comp_fetch.json();\n\n      console.log(\"The file is : \", comp_db);\n\n      // const comp_file = await fs.readFile(comp_db, \"utf8\")\n      // const parsed_json = await JSON.parse(comp_file)\n      // const select_files_by_id = parsed_json.find((x) => x.id === id)\n      const select_files_by_id = comp_db.find((x) => x.id === id);\n      console.log({ select_files_by_id });\n      // for now , the content we will support will be react based , toll we have updated the ednpoint\n      const root_comp_name = select_files_by_id.files[0].root.name;\n      const root_comp_content =\n        select_files_by_id.files[0].root.contents[0].content;\n      const root_comp_path = path.join(root_dir, root_comp_name);\n      const child_comp = select_files_by_id.files[1].child;\n\n      path_to_add.push({\n        comp_content: root_comp_content,\n        comp_path: root_comp_path,\n      });\n\n      const child_path: string[] = [];\n      const depends_on: any[] = child_comp;\n      depends_on.map((dep) => {\n        const child_comp_name = dep.name;\n        const child_comp_content = dep.contents[0].content;\n        const child_comp_path = path.join(root_dir, child_comp_name);\n        path_to_add.push({\n          comp_content: child_comp_content,\n          comp_path: child_comp_path,\n        });\n      });\n      const dependencies: string[] = select_files_by_id.dependencies;\n      const spinner = ora(`Installing components...`).start();\n      if (!path_to_add) {\n        logger.warn(\"No component to add\");\n      } else {\n        path_to_add.map(async ({ comp_content, comp_path }) => {\n          await fs.writeFile(`${comp_path}.tsx`, comp_content);\n        });\n      }\n\n      // const path_it_self = select_files_by_id.comp_path\n      // // const dependent_path = select_files_by_id.depends_on\n      // const write_together = [path_it_self, ...dependent_path]\n\n      // console.log({ write_together })\n      // write_together.map(async (comp) => {\n      //   const file_path = path.join(root_dir, \"commands\")\n      //   const file_path_read = path.join(file_path, comp)\n      //   console.log({ file_path_read })\n      //   const file_read = await fs.readFile(file_path_read, \"utf8\")\n      //   const write_path = path.join(path_, comp)\n      //   await fs.writeFile(write_path, file_read)\n      // })\n      // const dependencies = select_files_by_id.dependencies\n      if (dependencies?.length) {\n        await execa(\"pnpm\", [\"install\", ...dependencies], {\n          cwd: process.cwd(),\n        });\n      }\n      spinner.succeed(\"Successfully installed\");\n    } catch (err) {\n      console.log(\"Error: \", err);\n    }\n  });\n  return addsomething\n}\n","export const FARMUI_GRAFFITI = `\n░▒▓████████▓▒░▒▓██████▓▒░░▒▓███████▓▒░░▒▓██████████████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓██████▓▒░░▒▓████████▓▒░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░ \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░  \n░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓██████▓▒░░▒▓█▓▒░  v0.0.1 \n\n                                                                               \n`","import chalk from \"chalk\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args))\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args))\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args))\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args))\n  },\n  break() {\n    console.log(\"\")\n  },\n}\n"],"mappings":"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","names":["Command","existsSync","fs","path","gradient","Command","ora","execa","prompts","FARMUI_GRAFFITI","chalk","logger","args","COMPONENT_REGISTERY_URL","gradient","FARMUI_GRAFFITI","add","Command","id","opts","defaultDir","dir","prompts","path_","path","root_dir","existsSync","logger","proceed","fs","path_to_add","comp_fetch","comp_db","select_files_by_id","x","root_comp_name","root_comp_content","root_comp_path","child_comp","child_path","dep","child_comp_name","child_comp_content","child_comp_path","dependencies","spinner","ora","comp_content","comp_path","execa","err","main","program","Command","add"]}